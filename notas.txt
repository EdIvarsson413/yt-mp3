-------------ffmpeg-static
import cp from "child_process"
import ffmpeg from 'ffmpeg-static'

if( existsSync( 'node_modules/ffmpeg-static/ffmpeg.exe' ) ){
    const convertion = spawnSync(
        'node_modules/ffmpeg-static/ffmpeg.exe', 
        [
            '-loglevel', '24',
            '-i', 'pipe:0',
            '-vn', '-sn',
            '-c:a', 'mp3',
            '-ab', '192k',
            '-f', 'mp3',
            'pipe:1'
        ], 
        {
            input: videoBuffer,
            maxBuffer: 50 * 1024 * 1024
        }
    )

    let audioBuffer = [];
    if( convertion.error ) {
        // Manejar error
    } else {
        audioBuffer = convertion.stdout;
        return audioBuffer;
    }
} else {
    console.log( 'Convertidor No disponible' )
}


---------fluent-ffmpeg
// import ffmpeg from 'fluent-ffmpeg'

// Do the convertion (must return an audio buffer)
    convert( videoSream ) {
        return __async(this, null, function* () {
            return new Promise((resolve, reject) => {
                // Validate if ffmpeg is instaled in project
                if( 'node_modules/ffmpeg-static/ffmpeg.exe' ) {
                    // Do the convertion of video stream to mp3 buffer
                    const outputStream = new PassThrough();
                    const chunks = [];

                    outputStream.on('data', chunk => chunks.push(chunk));
                    outputStream.on('end', () => resolve(Buffer.concat(chunks)));
                    outputStream.on('error', reject);

                    new ffmpeg( videoSream )
                        .setFfmpegPath('node_modules/ffmpeg-static/ffmpeg.exe')
                        .audioCodec('libmp3lame')
                        .audioBitrate('192k')
                        .outputOptions('-threads', '0')
                        .format('mp3')
                        .pipe(outputStream, { end: true });
                } else 
                    console.log( 'Convertidor No Disponible' )
            });
        });
    }